{"version":3,"sources":["logo.svg","Cards.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","trans","x","y","z","Card","pic","func","useState","on","toggle","useSpring","xyz","config","slow","set","useEffect","setTimeout","style","position","div","onClick","class","top","left","transform","interpolate","zIndex","onMouseMove","clientX","clientY","window","innerHeight","innerWidth","onMouseLeave","backgroundImage","Cards","display","flexWrap","justifyContent","map","i","index","key","App","isToggled","value","opacity","stiff","wobbly","from","color","to","width","backgroundColor","height","o","next","cancel","a","async","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aaab48b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react'\nimport { useSpring, animated, config, interpolate } from 'react-spring'\n\nconst calc = (x, y) => {\n    let h = window.innerHeight\n    let w = window.innerWidth\n    let a = -(y - h / 2) / 20\n    let b = (x - w / 2) / 20\n    return [a, b, 1.1]\n}\n//const trans = (x, y, s) => `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`\nconst trans = (x, y, z) => `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${z})`\n\nfunction Card({ pic, func }) {\n    let [on, toggle] = useState(false)\n    //const props = useSpring({ xys: [0, 0, 1], config:config.wobbly })\n    let [{ xyz, z }, set] = useSpring(() => ({ z: 2, xyz: [0, 20, 1], config: config.slow }))\n\n    useEffect(() => {\n        setTimeout(() => set({ xyz: [0, 180, 1] }), 2000)\n    }, [])\n\n\n\n    function doToggle({ clientX: x, clientY: y }) {\n        //toggle(!on)\n        if (on) return\n        set({ xyz: [-(y - window.innerHeight / 2) / 10, (x - window.innerWidth / 2) / 10, 1] })\n        //else set({xyz:[0,0,1]})\n    }\n    function doClick() {\n\n        toggle(true)\n        //if (on) \n        set({ xyz: [0, 360, 2.5], z: 1 })\n        //else set({xyz:[0,0,1]})\n    }\n\n    function doLeave() {\n        if (!on) return\n        toggle(false)\n        set({ xyz: [0, 0, 1] })\n    }\n\n    return (\n        <div style={{ position: \"relative\" }}>\n            <animated.div\n\n                onClick={doClick}\n\n                class=\"card-two\"\n                style={{\n                    top: 0,\n                    left: 0,\n                    transform: xyz.interpolate(trans),\n                    zIndex: on ? 1000 : null, position: \"absolute\"\n                }}\n\n            ></animated.div>\n            <animated.div\n                class=\"card\"\n                //onMouseMove={({ clientX: x, clientY: y }) => set({ xys: calc(x, y) })}\n                //onMouseLeave={() => set({ xys: [0, 0, 1] })}\n                onMouseMove={doToggle}\n                onMouseLeave={doLeave}\n                style={{\n                    backgroundImage: `url(${pic})`,\n                    transform: xyz.interpolate(trans),\n                    zIndex: on ? 1000 : null,\n                    position: \"relative\"\n                }}\n            />\n\n        </div>\n    )\n}\n\nfunction Cards() {\n    let [pair, setPair] = useState([])\n    let cards = [\n        \"https://pbs.twimg.com/profile_images/779305023507271681/GJJhYpD2_400x400.jpg\",\n        \"https://disruptivoo.com/wp-content/uploads/2019/03/Los-mejores-wallpapers-de-los-Simpsons-23.jpg\",\n        \"https://i.blogs.es/4aec21/alone_1280x800/450_1000.jpg\",\n        \"https://pbs.twimg.com/profile_images/779305023507271681/GJJhYpD2_400x400.jpg\",\n        \"https://tt.tudocdn.net/338603?h=345\",\n        \"https://i.blogs.es/4aec21/alone_1280x800/450_1000.jpg\",\n        \"http://blog.fixter.org/content/images/2017/04/firebaseM-1.jpg\",\n        \"https://tt.tudocdn.net/338603?h=345\",\n        \"https://disruptivoo.com/wp-content/uploads/2019/03/Los-mejores-wallpapers-de-los-Simpsons-23.jpg\",\n\n    ]\n\n    function doCompare() {\n        if (pair.length < 2) return\n        if (pair[0] === pair[1]) return setPair([])\n    }\n\n    function renderCard(i, index) {\n        return <Card pic={i} key={index} />\n    }\n    return (\n        <div style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}>\n            {cards.map(renderCard)}\n        </div>\n    )\n}\n\nexport default Cards\n","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useSpring, animated, config, interpolate } from 'react-spring'\nimport Cards from './Cards'\n\nfunction App() {\n  let [isToggled, set] = useState(true)\n  let [value, setValue] = useState(20)\n  let fade = useSpring({\n    opacity: isToggled ? 0 : 1,\n    config: config.stiff\n  })\n  let number = useSpring({\n    x: isToggled ? 100 : 1\n  })\n  let move = useSpring({\n    opacity: !isToggled ? 1 : .5,\n    transform: !isToggled ? 'translate3d(0px,-30px,0) scale(1.7)' : 'translate3d(0px,-10px,0) scale(1)',\n    config: config.wobbly\n  })\n\n  const multiAnimation = useSpring({\n    from: { opacity: 0, color: 'red' },\n    to: [\n      { opacity: 1, color: '#ffaaee' },\n      { opacity: 1, color: 'red' },\n      { opacity: .5, color: '#008000' },\n      { opacity: .8, color: 'white' },\n      { opacity: 0, color: 'white' }\n    ],\n    config: config.wobbly\n  });\n\n  let bar = useSpring({\n    width: isToggled ? \"0%\" : `${value}%`,\n    backgroundColor: \"yellow\",\n    height: \"100%\",\n    // config: config.molasses\n  })\n\n  const { o, xyz, color } = useSpring({\n    o: isToggled ? 1 : 0,\n    xyz: isToggled ? [10, 20, 5] : [10, 10, 10],\n    color: isToggled ? 'green' : \"red\"\n  })\n\n  const asy = useSpring({\n    to: async (next, cancel) => {\n      await next({ opacity: 1, color: '#ffaaee' })\n      await next({ opacity: 0, color: 'rgb(14,26,19)' })\n    },\n    from: { opacity: 0, color: 'red' }\n  })\n\n  useEffect(() => {\n    set(!isToggled)\n  }, [])\n\n  return <Cards />\n  return (\n    <div className=\"App\">\n      <animated.div style={asy}>I will fade in and out</animated.div>\n      <header className=\"App-header\">\n        <animated.div style={move}>\n          <img style={move} src={logo} className=\"App-logo\" alt=\"logo\" />\n        </animated.div>\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <animated.div style={multiAnimation}>\n          I'm going to Fade!\n        </animated.div>\n        <animated.span style={move}>\n          {number.x.interpolate(x => x.toFixed(0))}\n        </animated.span>\n        <button\n          style={{ padding: \"20px 50px\", cursor: \"pointer\" }}\n          onClick={() => set(!isToggled)}\n        >\n          Fade!\n        </button>\n\n        <animated.div\n          style={{\n            // If you can, use plain animated values like always, ...\n            // You would do that in all cases where values \"just fit\"\n            color,\n            // Unless you need to interpolate them\n            background: o.interpolate(o => `rgba(500, 257, 177, ${o})`),\n            // Which works with arrays as well\n            transform: xyz.interpolate((x, y, z) => `translate3d(${x}px, ${y}px, ${z}px)`),\n            // If you want to combine multiple values use the \"interpolate\" helper\n            border: interpolate([o, color], (o, c) => `${o * 10}px solid ${c}`),\n            // You can also form ranges, even chain multiple interpolations\n            padding: o.interpolate({ range: [0, 0.5, 1], output: [0, 0, 7] }).interpolate(o => {\n              // console.log(o)\n              return `${o}%`\n            }),\n            // Interpolating strings (like up-front) through ranges is allowed ...\n            borderColor: o.interpolate({ range: [0, 1], output: ['red', '#ffaabb'] }),\n            // There's also a shortcut for plain, optionless ranges ...\n            // opacity: o.interpolate([0.1, 0.2, 0.6, 1], [1, 0.1, 0.5, 1])\n          }}\n        >\n\n        </animated.div>\n\n        <div style={styles.bar}>\n          <animated.div style={bar} />\n        </div>\n\n        <button\n          style={{ padding: \"20px 50px\", cursor: \"pointer\" }}\n          onClick={() => value < 100 ? setValue(value + 20) : setValue(20)}\n        >\n          Sumar!\n        </button>\n\n\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\nlet styles = {\n  bar: {\n    borderRadius: \"50%\",\n    overflow: \"hidden\",\n    marginTop: 20,\n    width: 200,\n    height: 200,\n    border: \"1px solid orange\",\n    backgroundColor: \"transparent\"\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}